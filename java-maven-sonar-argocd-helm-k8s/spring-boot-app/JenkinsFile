pipeline {
  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
    }
  }

  environment {
    SONAR_URL = "http://13.233.227.70:9000"
    DOCKER_IMAGE = "dudekulamohammedali/ultimate-cicd:${BUILD_NUMBER}"
    GIT_REPO_NAME = "Jenkins-Zero-To-Hero"
    GIT_USER_NAME = "mohammedalidude"
  }

  stages {
    stage('Checkout Code') {
      steps {
        checkout([$class: 'GitSCM', 
          branches: [[name: '*/main']], 
          extensions: [[$class: 'WipeWorkspace']], 
          userRemoteConfigs: [[url: 'https://github.com/mohammedalidude/Jenkins-Zero-To-Hero']]
        ])
      }
    }

    stage('Setup Java 17') {  // ðŸ”¹ Ensure Java 17 is installed
      steps {
        sh '''
          echo "Installing Java 17..."
          apt-get update && apt-get install -y openjdk-17-jdk
          export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
          export PATH=$JAVA_HOME/bin:$PATH
          java -version
        '''
      }
    }

    stage('Build and Test') {
      steps {
        sh '''
          ls -ltr
          cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
          mvn clean package
        '''
      }
    }

    stage('Static Code Analysis') {
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh '''
            export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
            export PATH=$JAVA_HOME/bin:$PATH
            java -version
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
            mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}
          '''
        }
      }
    }

    stage('Build and Push Docker Image') {
      steps {
        script {
          sh '''
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
            docker build -t ${DOCKER_IMAGE} .
          '''
          def dockerImage = docker.image("${DOCKER_IMAGE}")
          docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
            dockerImage.push()
          }
        }
      }
    }

    stage('Update Deployment File') {
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          sh '''
            git config --global user.email "mohammedalidude@example.com"
            git config --global user.name "Mohammed Ali"
            sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
            git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
            git commit -m "Update deployment image to version ${BUILD_NUMBER}"
            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
          '''
        }
      }
    }
  }
}
